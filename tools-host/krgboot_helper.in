#!/bin/sh

set -e

PATH=/sbin:/bin:/usr/sbin:/usr/bin

SYS_DIR=/sys/kerrighed/hotplug
RUN_DIR=/var/run/kerrighed
KRGBOOT=@sbindir@/krgboot

error() {
    echo "E: $@"
    exit 1
}

if [ ! -x "$KRGBOOT" ]; then
    error "Can not find krgboot: $KRGBOOT"
fi

ISOLATE_UTS=`cat $SYS_DIR/isolate_uts`
ISOLATE_IPC=`cat $SYS_DIR/isolate_ipc`
ISOLATE_MNT=`cat $SYS_DIR/isolate_mnt`
ISOLATE_PID=`cat $SYS_DIR/isolate_pid`
ISOLATE_NET=`cat $SYS_DIR/isolate_net`
ISOLATE_USER=`cat $SYS_DIR/isolate_user`
CLUSTER_INIT_HELPER=`cat $SYS_DIR/cluster_init_helper`

if [ -z "$CLUSTER_INIT_HELPER" ]; then
    error "$SYS_DIR/cluster_init_helper not set"
fi

if [ ! -x "$CLUSTER_INIT_HELPER" ]; then
    error "Can not find cluster init helper: $CLUSTER_INIT_HELPER"
fi

NS_ARGS=
if [ "$ISOLATE_UTS" -ne 0 ]; then
	NS_ARGS="$NS_ARGS -u"
fi
if [ "$ISOLATE_IPC" -ne 0 ]; then
	NS_ARGS="$NS_ARGS -i"
fi
if [ "$ISOLATE_MNT" -ne 0 ]; then
	NS_ARGS="$NS_ARGS -m"
fi
if [ "$ISOLATE_PID" -ne 0 ]; then
	NS_ARGS="$NS_ARGS -p"
fi
if [ "$ISOLATE_NET" -ne 0 ]; then
	NS_ARGS="$NS_ARGS -n"
fi
if [ "$ISOLATE_USER" -ne 0 ]; then
	NS_ARGS="$NS_ARGS -U"
fi

rm -rf $RUN_DIR
mkdir -p $RUN_DIR
TEMPPID=$RUN_DIR/krginit-pid.$$
mkfifo $TEMPPID || error "Cannot create temporary PID file"

run-parts -- @sysconfdir@/kerrighed/krgboot_helper-pre.d

# The kernel expects that the Kerrighed container will be cloned from this very
# process, so KRGBOOT must be exec()'ed, which does not allow us to run post
# scripts from this process.
# Instead launch a trigger, which synchronizes with container creation through a
# FIFO.
(
	read PID < $TEMPPID
	rm "$TEMPPID"
	[ -z "$PID" ] && exit 1

	run-parts --arg=$PID -- @sysconfdir@/kerrighed/krgboot_helper-post.d
) &

exec $KRGBOOT $NS_ARGS -w "$TEMPPID" -- $CLUSTER_INIT_HELPER
